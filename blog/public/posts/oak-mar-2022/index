<!DOCTYPE html>
<html lang="en" dir="auto">

<head><meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<meta name="robots" content="index, follow">
<title>State of Oak: March 2022 | 200sc.dev</title>
<meta name="keywords" content="">
<meta name="description" content="What&rsquo;s new this month  Oak V4 Alpha Bark: A grid-based game engine  Oak v4 Alpha Oak v4 alpha 1 is out today, featuring a complete overhaul of the event system, enabled via type parameterization and go 1.18. While we&rsquo;re planning a breaking change, there&rsquo;s several things we already know we want to include:
Event Overhaul We&rsquo;ve started off by rewriting the event package. There are a lot of changes, but the biggest difference is the use of type parameters to make the binding / triggering interface type safe:">
<meta name="author" content="">
<link rel="canonical" href="http://200sc.dev/posts/oak-mar-2022/">
<link crossorigin="anonymous" href="/assets/css/stylesheet.min.48a18943c2fc15c38a372b8dde1f5e5dc0bc64fa6cb90f5a817d2f8c76b7f3ae.css" integrity="sha256-SKGJQ8L8FcOKNyuN3h9eXcC8ZPpsuQ9agX0vjHa3864=" rel="preload stylesheet" as="style">
<script defer crossorigin="anonymous" src="/assets/js/highlight.min.7680afc38aa6b15ddf158a4f3780b7b1f7dde7e91d26f073e6229bb7a0793c92.js" integrity="sha256-doCvw4qmsV3fFYpPN4C3sffd5&#43;kdJvBz5iKbt6B5PJI="
    onload="hljs.initHighlightingOnLoad();"></script>
<link rel="icon" href="http://200sc.dev/favicon.ico">
<link rel="icon" type="image/png" sizes="16x16" href="http://200sc.dev/favicon-16x16.png">
<link rel="icon" type="image/png" sizes="32x32" href="http://200sc.dev/favicon-32x32.png">
<link rel="apple-touch-icon" href="http://200sc.dev/apple-touch-icon.png">
<link rel="mask-icon" href="http://200sc.dev/safari-pinned-tab.svg">
<meta name="theme-color" content="#2e2e33">
<meta name="msapplication-TileColor" content="#2e2e33">
<noscript>
    <style>
        #theme-toggle,
        .top-link {
            display: none;
        }

    </style>
    <style>
        @media (prefers-color-scheme: dark) {
            :root {
                --theme: rgb(29, 30, 32);
                --entry: rgb(46, 46, 51);
                --primary: rgb(218, 218, 219);
                --secondary: rgb(155, 156, 157);
                --tertiary: rgb(65, 66, 68);
                --content: rgb(196, 196, 197);
                --hljs-bg: rgb(46, 46, 51);
                --code-bg: rgb(55, 56, 62);
                --border: rgb(51, 51, 51);
            }

            .list {
                background: var(--theme);
            }

            .list:not(.dark)::-webkit-scrollbar-track {
                background: 0 0;
            }

            .list:not(.dark)::-webkit-scrollbar-thumb {
                border-color: var(--theme);
            }
        }

    </style>
</noscript><meta property="og:title" content="State of Oak: March 2022" />
<meta property="og:description" content="What&rsquo;s new this month  Oak V4 Alpha Bark: A grid-based game engine  Oak v4 Alpha Oak v4 alpha 1 is out today, featuring a complete overhaul of the event system, enabled via type parameterization and go 1.18. While we&rsquo;re planning a breaking change, there&rsquo;s several things we already know we want to include:
Event Overhaul We&rsquo;ve started off by rewriting the event package. There are a lot of changes, but the biggest difference is the use of type parameters to make the binding / triggering interface type safe:" />
<meta property="og:type" content="article" />
<meta property="og:url" content="http://200sc.dev/posts/oak-mar-2022/" /><meta property="article:section" content="posts" />
<meta property="article:published_time" content="2022-04-02T18:26:02-06:00" />
<meta property="article:modified_time" content="2022-04-02T18:26:02-06:00" />

<meta name="twitter:card" content="summary"/>
<meta name="twitter:title" content="State of Oak: March 2022"/>
<meta name="twitter:description" content="What&rsquo;s new this month  Oak V4 Alpha Bark: A grid-based game engine  Oak v4 Alpha Oak v4 alpha 1 is out today, featuring a complete overhaul of the event system, enabled via type parameterization and go 1.18. While we&rsquo;re planning a breaking change, there&rsquo;s several things we already know we want to include:
Event Overhaul We&rsquo;ve started off by rewriting the event package. There are a lot of changes, but the biggest difference is the use of type parameters to make the binding / triggering interface type safe:"/>


<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [, 
    {
      "@type": "ListItem",
      "position":  2 ,
      "name": "Posts",
      "item": "http://200sc.dev/posts/"
    }, 
    {
      "@type": "ListItem",
      "position":  3 ,
      "name": "State of Oak: March 2022",
      "item": "http://200sc.dev/posts/oak-mar-2022/"
    }
  ]
}
</script>
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": "State of Oak: March 2022",
  "name": "State of Oak: March 2022",
  "description": "What\u0026rsquo;s new this month  Oak V4 Alpha Bark: A grid-based game engine  Oak v4 Alpha Oak v4 alpha 1 is out today, featuring a complete overhaul of the event system, enabled via type parameterization and go 1.18. While we\u0026rsquo;re planning a breaking change, there\u0026rsquo;s several things we already know we want to include:\nEvent Overhaul We\u0026rsquo;ve started off by rewriting the event package. There are a lot of changes, but the biggest difference is the use of type parameters to make the binding / triggering interface type safe:",
  "keywords": [
    
  ],
  "articleBody": "  What’s new this month  Oak V4 Alpha Bark: A grid-based game engine  Oak v4 Alpha Oak v4 alpha 1 is out today, featuring a complete overhaul of the event system, enabled via type parameterization and go 1.18. While we’re planning a breaking change, there’s several things we already know we want to include:\nEvent Overhaul We’ve started off by rewriting the event package. There are a lot of changes, but the biggest difference is the use of type parameters to make the binding / triggering interface type safe:\nBefore:\nfunc() { ... k.Bind(key.Down, key.Binding(func(id event.CID, ev key.Event) int { kb, _ := k.ctx.CallerMap.GetEntity(id).(*Keyboard) btn := ev.Code.String()[4:] if kb.rs[btn] == nil { return 0 } kb.rs[btn].Set(\"pressed\") kb.rs[ev.Code].Set(\"pressed\") return 0 })) } ... package key func Binding(fn func(event.CID, Event) int) func(event.CID, interface{}) int { return func(cid event.CID, iface interface{}) int { ke, ok := iface.(Event) if !ok { return event.UnbindSingle } return fn(cid, ke) } } After:\nevent.Bind(ctx, key.AnyDown, k, func(kb *Keyboard, ev key.Event) event.Response { if kb.rs[ev.Code] == nil { return 0 } kb.rs[btn].Set(\"pressed\") kb.rs[ev.Code].Set(\"pressed\") return 0 })) In short, all the helper functions and bad feeling “reload this thing” and “assert it is what it should be” are now internal to event itself. Because Go 1.18 does not support type-parameterized methods, these new features are not things you can call on an event.Handler internally, but are functions that accept event.Handlers instead.\nThere are many other significant changes in this first release already (and with this first release we are probably done looking at event):\nThe handler interface has changed:\nBefore:\ntype Handler interface { WaitForEvent(name string) chan interface{} //  \tUpdateLoop(framerate int, updateCh chan struct{}) error FramesElapsed() int SetTick(framerate int) error Update() error Flush() error Stop() error Reset() SetRefreshRate(time.Duration) //  \tTrigger(event string, data interface{}) TriggerBack(event string, data interface{}) chan struct{} TriggerCIDBack(cid CID, eventName string, data interface{}) chan struct{} //  \tPause() Resume() //  \tBind(string, CID, Bindable) GlobalBind(string, Bindable) UnbindAll(Event) UnbindAllAndRebind(Event, []Bindable, CID, []string) UnbindBindable(UnbindOption) } After:\ntype Handler interface { Reset() TriggerForCaller(cid CallerID, event UnsafeEventID, data interface{}) chan struct{} Trigger(event UnsafeEventID, data interface{}) chan struct{} UnsafeBind(UnsafeEventID, CallerID, UnsafeBindable) Binding Unbind(Binding) chan struct{} UnbindAllFrom(CallerID) chan struct{} SetCallerMap(*CallerMap) GetCallerMap() *CallerMap } Yes, it’s drastically smaller! The following realizations enabled this:\n Many of these methods (SetTick, UpdateLoop, FramesElapsed, Stop, Pause, Resume) all exist to enable looping event handlers over event.Enter calls. All of these functions, however, were either not used by oak or could be removed by changing this feature from a method on a handler to a helper function. The new function event.EnterLoop handles this use case. GlobalBind is now a type-safe helper function, calling UnsafeBind with the event.Global constant TriggerBack is now just Trigger, with the distinction on use of the returned channel documented UnsafeBind returns a new Binding type, which can be used to enable the other Unbind variants SetRefreshRate and Flush were needed to run ResolveChanges, which deferred handling of bindings to a single looping thread. Each binding now creates a goroutine, waits on a lock, takes effect once it acquires the lock, and then closes the returned chan struct{}. This drastically simplifies the package’s internal systems.  And the new methods:\n Set and Get for the bus’s caller map, to make it easier to obtain callers from the correct map when needed. UnbindAllFrom was identified as a cleaner variant of former unbind helpers for Callers.  There was one problem we had to solve in the details above: previously the ResolveChanges loop was managed by two mutexes, and was designed so that concurrent calls to Reset on the handler would not cause bindings to operate against the newly reset bus, for example. So before:\nfunc (eb *Bus) Bind(name string, callerID CID, fn Bindable) { eb.pendingMutex.Unlock() eb.binds = append(eb.binds, UnbindOption{ Event: Event{ Name: name, CallerID: callerID, }, Fn: fn}) eb.pendingMutex.Unlock() // the binding appended above (confusingly called an 'UnbindOption') will be picked up next loop, or dropped next Reset. } After:\nfunc (bus *Bus) UnsafeBind(eventID UnsafeEventID, callerID CallerID, fn UnsafeBindable) Binding { expectedResetCount := bus.resetCount bindID := BindID(atomic.AddInt64(bus.nextBindID, 1)) ch := make(chan struct{}) go func() { defer close(ch) bus.mutex.Lock() defer bus.mutex.Unlock() if bus.resetCount != expectedResetCount { // The event bus has reset while we we were waiting to bind this \treturn } bl := bus.getBindableList(eventID, callerID) bl[bindID] = fn }() return Binding{ Handler: bus, EventID: eventID, CallerID: callerID, BindID: bindID, Bound: ch, busResetCount: bus.resetCount, } } Internally event’s built in handler (Bus) tracks the number of times it has reset, and we use this within binding operations to recognize when a call has been made invalid due to a concurrent reset on the bus.\nSome ancillary packages changed along with this overhaul:\n Scenes no longer have a Loop function, because we never used them and if you wanted one you could easily get one via event.GlobalBind scene.Context now embeds its event types, to make it easy to perform event operations using it. The key and mouse packages have a different event syntax to better differentiate between listening for e.g. any key was pressed vs the ‘w’ key was pressed.  There’s a lot more detail in the package itself documenting why certain things are the way they are, which was also a lacking quality from the v3 event package.\nDrivers / Shiny In progress but not in the alpha release, we are attempting to overhaul the internal os driver interface. Goals are:\n To remove and consolidate concepts and code that we’ve inherited from exp/shiny which we no longer need. To move the current system of runtime checks for OS level features (which was originally introduced for backwards compatibility) to compile-time checks. E.g. right now if you were to call oak.SetTopMost when compiling to javascript it would let you, and that operation would just return an error whenever you called it. This change would demand that you move code using those sorts of operations to build tag guarded files for specific OSes if building a multi-platform game that wanted to do specific os level operations not globally supported.  The latter goal has a working windows implementation up here: https://github.com/oakmound/oak/pull/198/files, but there’s more to do to make every platform follow this, and to hopefully enhance all of these drivers to support more of the features other OSes currently support.\nEntities To put it briefly: the entities package hasn’t changed in a long time, and we’ve used it enough to throw it away and make something better with a clearer API. Its constructors take too many arguments, and it defines too many useless types with the goal of trying to express everything anyone could possibly want with the smallest data structures; this is pre-optimization, and we should instead just offer one thing that does everything you could want via an interface, like btn does. If a user is sad that that takes up 100 bytes instead of 40, one can always copy and delete things one does not want.\nAudio Cleanup As a part of the introduction of streaming audio, we needed to add it in such a way that it kept around the previous, non-streaming audio API. These APIs need to be combined. Unfortunately we cannot just only support streaming audio, because that’s infeasible in JS– you need to write and import JS modules to stream audio instead of just loading it all at once. This means we probably need to still support both streaming and non-streaming audio, cleanly indicating non-streaming audio is the only option in JS, and probably not enabling it on platforms that can support streaming audio.\nThis project is still being mulled over, obviously.\nBark: A grid-based game engine   We’ve decided on a name for the super game engine we’re building on top of Oak:Bark. and we’re working on it. We’re still in the API design stage, because we got a little swept up in Oak v4 work, but there should be more news shortly.\nWhat does it look like is coming up maybe before the next month has ended We’re going to finish the things mentioned above, being oak v4 and bark, and hopefully put out some demo / example games with the new APIs.\nThanks for Reading If you are using or thinking about using Oak do not hesitate to reach out with questions or suggestions.\nAlso Who am I (AKA About the Author) My name is Patrick Stephen in The Physical World and 200sc in The Digital World.\nI’ve been working on Oak since 2016, however much work at any time depending on whether I was receiving payment to work on something else instead for 40 hours. As of Apr 1 2022 the entity doing that is strongDM.\nIf you’d like to reach out to me you may do so via: patrick.d.stephen@gmail.com\n",
  "wordCount" : "1447",
  "inLanguage": "en",
  "datePublished": "2022-04-02T18:26:02-06:00",
  "dateModified": "2022-04-02T18:26:02-06:00",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "http://200sc.dev/posts/oak-mar-2022/"
  },
  "publisher": {
    "@type": "Organization",
    "name": "200sc.dev",
    "logo": {
      "@type": "ImageObject",
      "url": "http://200sc.dev/favicon.ico"
    }
  }
}
</script>
</head>

<body class="" id="top">
<script>
    if (localStorage.getItem("pref-theme") === "dark") {
        document.body.classList.add('dark');
    } else if (localStorage.getItem("pref-theme") === "light") {
        document.body.classList.remove('dark')
    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        document.body.classList.add('dark');
    }

</script>

<header class="header">
    <nav class="nav">
        <div class="logo">
            <a href="http://200sc.dev" accesskey="h" title="200sc.dev (Alt + H)">200sc.dev</a>
            <span class="logo-switches">
                <button id="theme-toggle" accesskey="t" title="(Alt + T)">
                    <svg id="moon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                        stroke-linejoin="round">
                        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
                    </svg>
                    <svg id="sun" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                        stroke-linejoin="round">
                        <circle cx="12" cy="12" r="5"></circle>
                        <line x1="12" y1="1" x2="12" y2="3"></line>
                        <line x1="12" y1="21" x2="12" y2="23"></line>
                        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
                        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
                        <line x1="1" y1="12" x2="3" y2="12"></line>
                        <line x1="21" y1="12" x2="23" y2="12"></line>
                        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
                        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
                    </svg>
                </button>
            </span>
        </div>
        <ul id="menu">
        </ul>
    </nav>
</header>
<main class="main">

<article class="post-single">
  <header class="post-header">
    
    <h1 class="post-title">
      State of Oak: March 2022
    </h1>
    <div class="post-meta"><span title='2022-04-02 18:26:02 -0600 -0600'>April 2, 2022</span>

</div>
  </header> 
  <div class="post-content"><figure>
    <img loading="lazy" src="oak_with_gophers.png" width="400" height="400"/> 
</figure>

<h2 id="whats-new-this-month">What&rsquo;s new this month<a hidden class="anchor" aria-hidden="true" href="#whats-new-this-month">#</a></h2>
<ul>
<li>Oak V4 Alpha</li>
<li>Bark: A grid-based game engine</li>
</ul>
<h3 id="oak-v4-alpha">Oak v4 Alpha<a hidden class="anchor" aria-hidden="true" href="#oak-v4-alpha">#</a></h3>
<p><a href="https://github.com/oakmound/oak/releases">Oak v4 alpha 1</a> is out today, featuring a complete overhaul of the event system, enabled via type parameterization and go 1.18.
While we&rsquo;re planning a breaking change, there&rsquo;s several things we already know we want to include:</p>
<h4 id="event-overhaul">Event Overhaul<a hidden class="anchor" aria-hidden="true" href="#event-overhaul">#</a></h4>
<p>We&rsquo;ve started off by rewriting the <code>event</code> package. There are a lot of changes, but the biggest difference is the use of type parameters to make the binding / triggering interface type safe:</p>
<p>Before:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span>() {
    <span style="color:#f92672">...</span>
    <span style="color:#a6e22e">k</span>.<span style="color:#a6e22e">Bind</span>(<span style="color:#a6e22e">key</span>.<span style="color:#a6e22e">Down</span>, <span style="color:#a6e22e">key</span>.<span style="color:#a6e22e">Binding</span>(<span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">id</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">CID</span>, <span style="color:#a6e22e">ev</span> <span style="color:#a6e22e">key</span>.<span style="color:#a6e22e">Event</span>) <span style="color:#66d9ef">int</span> {
        <span style="color:#a6e22e">kb</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">k</span>.<span style="color:#a6e22e">ctx</span>.<span style="color:#a6e22e">CallerMap</span>.<span style="color:#a6e22e">GetEntity</span>(<span style="color:#a6e22e">id</span>).(<span style="color:#f92672">*</span><span style="color:#a6e22e">Keyboard</span>)
        <span style="color:#a6e22e">btn</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Code</span>.<span style="color:#a6e22e">String</span>()[<span style="color:#ae81ff">4</span>:]
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">kb</span>.<span style="color:#a6e22e">rs</span>[<span style="color:#a6e22e">btn</span>] <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
        }
        <span style="color:#a6e22e">kb</span>.<span style="color:#a6e22e">rs</span>[<span style="color:#a6e22e">btn</span>].<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;pressed&#34;</span>)
        <span style="color:#a6e22e">kb</span>.<span style="color:#a6e22e">rs</span>[<span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Code</span>].<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;pressed&#34;</span>)
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
    }))
}

<span style="color:#f92672">...</span>
<span style="color:#f92672">package</span> <span style="color:#a6e22e">key</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Binding</span>(<span style="color:#a6e22e">fn</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">CID</span>, <span style="color:#a6e22e">Event</span>) <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">CID</span>, <span style="color:#66d9ef">interface</span>{}) <span style="color:#66d9ef">int</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">cid</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">CID</span>, <span style="color:#a6e22e">iface</span> <span style="color:#66d9ef">interface</span>{}) <span style="color:#66d9ef">int</span> {
		<span style="color:#a6e22e">ke</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">iface</span>.(<span style="color:#a6e22e">Event</span>)
		<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">ok</span> {
			<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">UnbindSingle</span>
		}
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fn</span>(<span style="color:#a6e22e">cid</span>, <span style="color:#a6e22e">ke</span>)
    }
}
</code></pre></div><p>After:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">Bind</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">key</span>.<span style="color:#a6e22e">AnyDown</span>, <span style="color:#a6e22e">k</span>, <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">kb</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Keyboard</span>, <span style="color:#a6e22e">ev</span> <span style="color:#a6e22e">key</span>.<span style="color:#a6e22e">Event</span>) <span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">Response</span> {
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">kb</span>.<span style="color:#a6e22e">rs</span>[<span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Code</span>] <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
    }
    <span style="color:#a6e22e">kb</span>.<span style="color:#a6e22e">rs</span>[<span style="color:#a6e22e">btn</span>].<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;pressed&#34;</span>)
    <span style="color:#a6e22e">kb</span>.<span style="color:#a6e22e">rs</span>[<span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">Code</span>].<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;pressed&#34;</span>)
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
}))
</code></pre></div><p>In short, all the helper functions and bad feeling &ldquo;reload this thing&rdquo; and &ldquo;assert it is what it should be&rdquo; are now internal to <code>event</code> itself. Because Go 1.18 does not support type-parameterized methods, these new features are not things you can call on an <code>event.Handler</code> internally, but are functions that accept <code>event.Handler</code>s instead.</p>
<p>There are many other significant changes in this first release already (and with this first release we are probably done looking at <code>event</code>):</p>
<p>The handler interface has changed:</p>
<p>Before:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Handler</span> <span style="color:#66d9ef">interface</span> {
	<span style="color:#a6e22e">WaitForEvent</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) <span style="color:#f92672">&lt;-</span><span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">interface</span>{}
	<span style="color:#75715e">// &lt;Handler&gt;
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">UpdateLoop</span>(<span style="color:#a6e22e">framerate</span> <span style="color:#66d9ef">int</span>, <span style="color:#a6e22e">updateCh</span> <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{}) <span style="color:#66d9ef">error</span>
	<span style="color:#a6e22e">FramesElapsed</span>() <span style="color:#66d9ef">int</span>
	<span style="color:#a6e22e">SetTick</span>(<span style="color:#a6e22e">framerate</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">error</span>
	<span style="color:#a6e22e">Update</span>() <span style="color:#66d9ef">error</span>
	<span style="color:#a6e22e">Flush</span>() <span style="color:#66d9ef">error</span>
	<span style="color:#a6e22e">Stop</span>() <span style="color:#66d9ef">error</span>
	<span style="color:#a6e22e">Reset</span>()
	<span style="color:#a6e22e">SetRefreshRate</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Duration</span>)
	<span style="color:#75715e">// &lt;Triggerer&gt;
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Trigger</span>(<span style="color:#a6e22e">event</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">data</span> <span style="color:#66d9ef">interface</span>{})
	<span style="color:#a6e22e">TriggerBack</span>(<span style="color:#a6e22e">event</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">data</span> <span style="color:#66d9ef">interface</span>{}) <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{}
	<span style="color:#a6e22e">TriggerCIDBack</span>(<span style="color:#a6e22e">cid</span> <span style="color:#a6e22e">CID</span>, <span style="color:#a6e22e">eventName</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">data</span> <span style="color:#66d9ef">interface</span>{}) <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{}
	<span style="color:#75715e">// &lt;Pauser&gt;
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Pause</span>()
	<span style="color:#a6e22e">Resume</span>()
	<span style="color:#75715e">// &lt;Binder&gt;
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Bind</span>(<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">CID</span>, <span style="color:#a6e22e">Bindable</span>)
	<span style="color:#a6e22e">GlobalBind</span>(<span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">Bindable</span>)
	<span style="color:#a6e22e">UnbindAll</span>(<span style="color:#a6e22e">Event</span>)
	<span style="color:#a6e22e">UnbindAllAndRebind</span>(<span style="color:#a6e22e">Event</span>, []<span style="color:#a6e22e">Bindable</span>, <span style="color:#a6e22e">CID</span>, []<span style="color:#66d9ef">string</span>)
	<span style="color:#a6e22e">UnbindBindable</span>(<span style="color:#a6e22e">UnbindOption</span>)
}
</code></pre></div><p>After:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Handler</span> <span style="color:#66d9ef">interface</span> {
    <span style="color:#a6e22e">Reset</span>()
	<span style="color:#a6e22e">TriggerForCaller</span>(<span style="color:#a6e22e">cid</span> <span style="color:#a6e22e">CallerID</span>, <span style="color:#a6e22e">event</span> <span style="color:#a6e22e">UnsafeEventID</span>, <span style="color:#a6e22e">data</span> <span style="color:#66d9ef">interface</span>{}) <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{}
	<span style="color:#a6e22e">Trigger</span>(<span style="color:#a6e22e">event</span> <span style="color:#a6e22e">UnsafeEventID</span>, <span style="color:#a6e22e">data</span> <span style="color:#66d9ef">interface</span>{}) <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{}
	<span style="color:#a6e22e">UnsafeBind</span>(<span style="color:#a6e22e">UnsafeEventID</span>, <span style="color:#a6e22e">CallerID</span>, <span style="color:#a6e22e">UnsafeBindable</span>) <span style="color:#a6e22e">Binding</span>
	<span style="color:#a6e22e">Unbind</span>(<span style="color:#a6e22e">Binding</span>) <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{}
	<span style="color:#a6e22e">UnbindAllFrom</span>(<span style="color:#a6e22e">CallerID</span>) <span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{}
    <span style="color:#a6e22e">SetCallerMap</span>(<span style="color:#f92672">*</span><span style="color:#a6e22e">CallerMap</span>)
	<span style="color:#a6e22e">GetCallerMap</span>() <span style="color:#f92672">*</span><span style="color:#a6e22e">CallerMap</span>
}
</code></pre></div><p>Yes, it&rsquo;s drastically smaller! The following realizations enabled this:</p>
<ul>
<li>Many of these methods (SetTick, UpdateLoop, FramesElapsed, Stop, Pause, Resume) all exist to enable looping event handlers over event.Enter calls. All of these functions, however, were either not used by oak or could be removed by changing this feature from a method on a handler to a helper function. The new function <code>event.EnterLoop</code> handles this use case.</li>
<li>GlobalBind is now a type-safe helper function, calling <code>UnsafeBind</code> with the <code>event.Global</code> constant</li>
<li><code>TriggerBack</code> is now just <code>Trigger</code>, with the distinction on use of the returned channel documented</li>
<li><code>UnsafeBind</code> returns a new <code>Binding</code> type, which can be used to enable the other Unbind variants</li>
<li><code>SetRefreshRate</code> and <code>Flush</code> were needed to run <code>ResolveChanges</code>, which deferred handling of bindings to a single looping thread. Each binding now creates a goroutine, waits on a lock, takes effect once it acquires the lock, and then closes the returned <code>chan struct{}</code>. This drastically simplifies the package&rsquo;s internal systems.</li>
</ul>
<p>And the new methods:</p>
<ul>
<li><code>Set</code> and <code>Get</code> for the bus&rsquo;s caller map, to make it easier to obtain callers from the correct map when needed.</li>
<li><code>UnbindAllFrom</code> was identified as a cleaner variant of former unbind helpers for Callers.</li>
</ul>
<p>There was one problem we had to solve in the details above: previously the <code>ResolveChanges</code> loop was managed by two mutexes, and was designed so that concurrent calls to <code>Reset</code> on the handler would not cause bindings to operate against the newly reset bus, for example. So before:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">eb</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Bus</span>) <span style="color:#a6e22e">Bind</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">callerID</span> <span style="color:#a6e22e">CID</span>, <span style="color:#a6e22e">fn</span> <span style="color:#a6e22e">Bindable</span>) {
	<span style="color:#a6e22e">eb</span>.<span style="color:#a6e22e">pendingMutex</span>.<span style="color:#a6e22e">Unlock</span>()
    <span style="color:#a6e22e">eb</span>.<span style="color:#a6e22e">binds</span> = append(<span style="color:#a6e22e">eb</span>.<span style="color:#a6e22e">binds</span>, <span style="color:#a6e22e">UnbindOption</span>{
        <span style="color:#a6e22e">Event</span>: <span style="color:#a6e22e">Event</span>{
			<span style="color:#a6e22e">Name</span>:     <span style="color:#a6e22e">name</span>,
			<span style="color:#a6e22e">CallerID</span>: <span style="color:#a6e22e">callerID</span>,
		}, <span style="color:#a6e22e">Fn</span>: <span style="color:#a6e22e">fn</span>})
	<span style="color:#a6e22e">eb</span>.<span style="color:#a6e22e">pendingMutex</span>.<span style="color:#a6e22e">Unlock</span>()
    <span style="color:#75715e">// the binding appended above (confusingly called an &#39;UnbindOption&#39;) will be picked up next loop, or dropped next Reset.
</span><span style="color:#75715e"></span>}
</code></pre></div><p>After:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">bus</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Bus</span>) <span style="color:#a6e22e">UnsafeBind</span>(<span style="color:#a6e22e">eventID</span> <span style="color:#a6e22e">UnsafeEventID</span>, <span style="color:#a6e22e">callerID</span> <span style="color:#a6e22e">CallerID</span>, <span style="color:#a6e22e">fn</span> <span style="color:#a6e22e">UnsafeBindable</span>) <span style="color:#a6e22e">Binding</span> {
	<span style="color:#a6e22e">expectedResetCount</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bus</span>.<span style="color:#a6e22e">resetCount</span>
	<span style="color:#a6e22e">bindID</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">BindID</span>(<span style="color:#a6e22e">atomic</span>.<span style="color:#a6e22e">AddInt64</span>(<span style="color:#a6e22e">bus</span>.<span style="color:#a6e22e">nextBindID</span>, <span style="color:#ae81ff">1</span>))
	<span style="color:#a6e22e">ch</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{})
	<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
		<span style="color:#66d9ef">defer</span> close(<span style="color:#a6e22e">ch</span>)
		<span style="color:#a6e22e">bus</span>.<span style="color:#a6e22e">mutex</span>.<span style="color:#a6e22e">Lock</span>()
		<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">bus</span>.<span style="color:#a6e22e">mutex</span>.<span style="color:#a6e22e">Unlock</span>()
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">bus</span>.<span style="color:#a6e22e">resetCount</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">expectedResetCount</span> {
			<span style="color:#75715e">// The event bus has reset while we we were waiting to bind this
</span><span style="color:#75715e"></span>			<span style="color:#66d9ef">return</span>
		}
		<span style="color:#a6e22e">bl</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bus</span>.<span style="color:#a6e22e">getBindableList</span>(<span style="color:#a6e22e">eventID</span>, <span style="color:#a6e22e">callerID</span>)
		<span style="color:#a6e22e">bl</span>[<span style="color:#a6e22e">bindID</span>] = <span style="color:#a6e22e">fn</span>
	}()
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Binding</span>{
		<span style="color:#a6e22e">Handler</span>:       <span style="color:#a6e22e">bus</span>,
		<span style="color:#a6e22e">EventID</span>:       <span style="color:#a6e22e">eventID</span>,
		<span style="color:#a6e22e">CallerID</span>:      <span style="color:#a6e22e">callerID</span>,
		<span style="color:#a6e22e">BindID</span>:        <span style="color:#a6e22e">bindID</span>,
		<span style="color:#a6e22e">Bound</span>:         <span style="color:#a6e22e">ch</span>,
		<span style="color:#a6e22e">busResetCount</span>: <span style="color:#a6e22e">bus</span>.<span style="color:#a6e22e">resetCount</span>,
	}
}
</code></pre></div><p>Internally event&rsquo;s built in handler (<code>Bus</code>) tracks the number of times it has reset, and we use this within binding operations to recognize when a call has been made invalid due to a concurrent reset on the bus.</p>
<p>Some ancillary packages changed along with this overhaul:</p>
<ul>
<li>Scenes no longer have a <code>Loop</code> function, because we never used them and if you wanted one you could easily get one via <code>event.GlobalBind</code></li>
<li><code>scene.Context</code> now embeds its event types, to make it easy to perform event operations using it.</li>
<li>The <code>key</code> and <code>mouse</code> packages have a different event syntax to better differentiate between listening for e.g. any key was pressed vs the &lsquo;w&rsquo; key was pressed.</li>
</ul>
<p>There&rsquo;s a lot more detail in the package itself documenting why certain things are the way they are, which was also a lacking quality from the v3 event package.</p>
<h4 id="drivers--shiny">Drivers / Shiny<a hidden class="anchor" aria-hidden="true" href="#drivers--shiny">#</a></h4>
<p>In progress but not in the alpha release, we are attempting to overhaul the internal os driver interface. Goals are:</p>
<ul>
<li>To remove and consolidate concepts and code that we&rsquo;ve inherited from exp/shiny which we no longer need.</li>
<li>To move the current system of runtime checks for OS level features (which was originally introduced for backwards compatibility) to compile-time checks. E.g. right now if you were to call <code>oak.SetTopMost</code> when compiling to javascript it would let you, and that operation would just return an error whenever you called it. This change would demand that you move code using those sorts of operations to build tag guarded files for specific OSes if building a multi-platform game that wanted to do specific os level operations not globally supported.</li>
</ul>
<p>The latter goal has a working windows implementation up here: <a href="https://github.com/oakmound/oak/pull/198/files">https://github.com/oakmound/oak/pull/198/files</a>, but there&rsquo;s more to do to make every platform follow this, and to hopefully enhance all of these drivers to support more of the features other OSes currently support.</p>
<h4 id="entities">Entities<a hidden class="anchor" aria-hidden="true" href="#entities">#</a></h4>
<p>To put it briefly: the <code>entities</code> package hasn&rsquo;t changed in a long time, and we&rsquo;ve used it enough to throw it away and make something better with a clearer API. Its constructors take too many arguments, and it defines too many useless types with the goal of trying to express everything anyone could possibly want with the smallest data structures; this is pre-optimization, and we should instead just offer one thing that does everything you could want via an interface, like <code>btn</code> does. If a user is sad that that takes up 100 bytes instead of 40, one can always copy and delete things one does not want.</p>
<h4 id="audio-cleanup">Audio Cleanup<a hidden class="anchor" aria-hidden="true" href="#audio-cleanup">#</a></h4>
<p>As a part of the introduction of streaming audio, we needed to add it in such a way that it kept around the previous, non-streaming audio API. These APIs need to be combined. Unfortunately we cannot just only support streaming audio, because that&rsquo;s infeasible in JS&ndash; you need to write and import JS modules to stream audio instead of just loading it all at once. This means we probably need to still support both streaming and non-streaming audio, cleanly indicating non-streaming audio is the only option in JS, and probably not enabling it on platforms that can support streaming audio.</p>
<p>This project is still being mulled over, obviously.</p>
<h3 id="bark-a-grid-based-game-engine">Bark: A grid-based game engine<a hidden class="anchor" aria-hidden="true" href="#bark-a-grid-based-game-engine">#</a></h3>
<figure>
    <img loading="lazy" src="bark_acorn.png" width="100" height="100"/> 
</figure>

<p>We&rsquo;ve decided on a name for the super game engine we&rsquo;re building on top of Oak:<code>Bark</code>. and we&rsquo;re working on it. We&rsquo;re still in the API design stage, because we got a little swept up in Oak v4 work, but there should be more news shortly.</p>
<h2 id="what-does-it-look-like-is-coming-up-maybe-before-the-next-month-has-ended">What does it look like is coming up maybe before the next month has ended<a hidden class="anchor" aria-hidden="true" href="#what-does-it-look-like-is-coming-up-maybe-before-the-next-month-has-ended">#</a></h2>
<p>We&rsquo;re going to finish the things mentioned above, being oak v4 and bark, and hopefully put out some demo / example games with the new APIs.</p>
<h2 id="thanks-for-reading">Thanks for Reading<a hidden class="anchor" aria-hidden="true" href="#thanks-for-reading">#</a></h2>
<p>If you are using or thinking about using Oak do not hesitate to reach out with questions or suggestions.</p>
<h2 id="also-who-am-i-aka-about-the-author">Also Who am I (AKA About the Author)<a hidden class="anchor" aria-hidden="true" href="#also-who-am-i-aka-about-the-author">#</a></h2>
<p>My name is Patrick Stephen in <a href="https://en.wikipedia.org/wiki/Earth">The Physical World</a> and <a href="https://github.com/200sc/">200sc</a> in <a href="https://digimon.fandom.com/wiki/Digital_World">The Digital World</a>.</p>
<p>I&rsquo;ve been working on Oak since 2016, however much work at any time depending on whether I was receiving payment to work on something else instead for 40 hours. As of Apr 1 2022 the entity doing that is <a href="https://www.strongdm.com/">strongDM</a>.</p>
<p>If you&rsquo;d like to reach out to me you may do so via: <a href="mailto:patrick.d.stephen@gmail.com">patrick.d.stephen@gmail.com</a></p>


  </div>

  <footer class="post-footer">
  </footer>
</article>
    </main>
    
<footer class="footer">
    <span>&copy; 2022 <a href="http://200sc.dev">200sc.dev</a></span>
    <span>
        Powered by
        <a href="https://gohugo.io/" rel="noopener noreferrer" target="_blank">Hugo</a> &
        <a href="https://git.io/hugopapermod" rel="noopener" target="_blank">PaperMod</a>
    </span>
</footer>
<a href="#top" aria-label="go to top" title="Go to Top (Alt + G)" class="top-link" id="top-link" accesskey="g">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 6" fill="currentColor">
        <path d="M12 6H0l6-6z" />
    </svg>
</a>

<script>
    let menu = document.getElementById('menu')
    if (menu) {
        menu.scrollLeft = localStorage.getItem("menu-scroll-position");
        menu.onscroll = function () {
            localStorage.setItem("menu-scroll-position", menu.scrollLeft);
        }
    }

    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener("click", function (e) {
            e.preventDefault();
            var id = this.getAttribute("href").substr(1);
            if (!window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
                document.querySelector(`[id='${decodeURIComponent(id)}']`).scrollIntoView({
                    behavior: "smooth"
                });
            } else {
                document.querySelector(`[id='${decodeURIComponent(id)}']`).scrollIntoView();
            }
            if (id === "top") {
                history.replaceState(null, null, " ");
            } else {
                history.pushState(null, null, `#${id}`);
            }
        });
    });

</script>
<script>
    var mybutton = document.getElementById("top-link");
    window.onscroll = function () {
        if (document.body.scrollTop > 800 || document.documentElement.scrollTop > 800) {
            mybutton.style.visibility = "visible";
            mybutton.style.opacity = "1";
        } else {
            mybutton.style.visibility = "hidden";
            mybutton.style.opacity = "0";
        }
    };

</script>
<script>
    document.getElementById("theme-toggle").addEventListener("click", () => {
        if (document.body.className.includes("dark")) {
            document.body.classList.remove('dark');
            localStorage.setItem("pref-theme", 'light');
        } else {
            document.body.classList.add('dark');
            localStorage.setItem("pref-theme", 'dark');
        }
    })

</script>
</body>

</html>
