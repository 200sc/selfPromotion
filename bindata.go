// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates\construction.go.html
// templates\footer.go.html
// templates\header.go.html
// templates\home.go.html
// templates\resume.go.html

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesconstructiongohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x31\xaa\xc3\x30\x0c\xc6\xf1\x3d\xa7\xf8\xf0\x01\x9e\x21\xb3\xc9" +
	"\xf2\x2e\xd0\xa5\x07\x70\x63\xa5\x0e\x24\x52\x71\xd5\xa1\x08\xdd\xbd\x10\x0f\x6d\x46\xa1\x3f\x3f\x3e\xb3\x42\xcb" +
	"\xca\x84\x30\x0b\x3f\xb5\xbd\x66\x5d\x85\x83\xfb\x90\xaa\xee\xdb\x34\x00\x80\x19\x94\xf6\xc7\x96\x95\x10\x2a\xe5" +
	"\x42\x2d\xe0\xcf\xfd\x78\xa6\x9b\x94\x77\xef\x8e\xb3\x8e\xd3\x25\xdf\x09\x57\x2e\xd4\xf0\xff\xa3\xa6\x58\xc7\x6f" +
	"\x78\x42\x17\x11\x3d\xa1\xb1\xab\x29\xf6\x15\x66\xc4\xc5\xfd\x13\x00\x00\xff\xff\xe7\x05\x5a\x09\xae\x00\x00\x00" +
	"")

func bindataTemplatesconstructiongohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesconstructiongohtml,
		"templates/construction.go.html",
	)
}



func bindataTemplatesconstructiongohtml() (*asset, error) {
	bytes, err := bindataTemplatesconstructiongohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/construction.go.html",
		size: 174,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1562601382, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesfootergohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc8\xc1\x09\x03\x41\x08\x05\xd0\xbb\x60\x0f\x1f\x1b\x98\x06\x5c\xcf" +
	"\x69\x63\x41\x87\x78\xc8\x0c\x2c\x61\x09\x88\xbd\xe7\xb4\xd7\x57\x05\x8f\x99\x2b\x20\x73\xef\x6f\x5c\x82\x6e\x26" +
	"\xf5\xbc\x91\x7e\x3c\x68\x4c\x00\xa0\x27\xde\x57\xcc\x43\x46\x2e\x8f\x9f\xd8\x6b\x7f\x42\xc7\x69\x4c\x3a\x3c\x6f" +
	"\x63\xaa\x42\x2c\x47\xf7\x3f\x00\x00\xff\xff\x86\x00\x63\x9e\x5a\x00\x00\x00")

func bindataTemplatesfootergohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesfootergohtml,
		"templates/footer.go.html",
	)
}



func bindataTemplatesfootergohtml() (*asset, error) {
	bytes, err := bindataTemplatesfootergohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/footer.go.html",
		size: 90,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1562601562, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesheadergohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x6e\xab\x30\x10\xbc\x47\xca\x3f\xac\x12\xe5\x12\x89\x07\x79" +
	"\x51\x73\x70\x51\xce\xfd\x0d\x83\xd7\xb0\x2d\xb1\x91\x59\xd2\x20\xc4\xbf\x57\x01\xd2\x1a\x42\xa5\x9e\xf0\xce\xe2" +
	"\xd9\x9d\x19\xb9\x6d\x41\xa1\x26\x83\xb0\xc9\x51\x2a\x74\x1b\xe8\xba\xf5\x2a\xbe\x17\xe7\xf5\x0a\x00\x20\x66\xe2" +
	"\x02\xcf\xff\xa3\xa8\x4a\xff\x29\xbc\xc6\xe1\x00\x8c\xdd\x8a\x9b\xef\x22\xb1\xaa\x81\x76\x38\xf7\xb5\x4c\x3f\x32" +
	"\x67\x6b\xa3\x82\xd4\x16\xd6\x09\xc8\x24\x99\x2a\xb1\xce\xbe\xfe\xfc\xc5\x78\xe3\x40\x16\x94\x19\x01\x29\x1a\x46" +
	"\xe7\x35\x15\x55\x65\x21\x1b\x01\x99\x23\xe5\xe1\x17\xe9\x32\x32\x22\xf2\xa0\x52\x2a\x45\x26\x9b\x60\x39\x52\x96" +
	"\xb3\x38\x44\xd1\x6e\x44\xbb\xe1\xb3\x4d\xad\x61\x49\x06\x9d\xbf\xf0\x85\x4c\xf0\x7c\xa5\x27\xb7\x15\x31\x59\x23" +
	"\x1c\x16\x92\xe9\x8a\x33\xba\xc1\xbd\x65\xf1\x62\xab\xf5\xd2\xa2\x87\xa8\xbc\x3d\x68\x00\x60\x38\x29\xba\xfa\x2c" +
	"\xbe\x39\x64\x72\x74\xc4\xcf\x2e\x80\xac\xd9\x77\xf4\x93\x14\xe7\x02\x8e\x73\xd1\xe5\x44\x6b\x7f\x37\x28\x50\xb3" +
	"\x80\xe3\xcb\xee\x97\x44\xde\xeb\x8a\x49\x37\x33\xb9\xf3\xa4\x17\x24\x79\x70\x90\x58\x66\x7b\x11\xa7\x7b\x17\x00" +
	"\xc2\x3d\xbc\xf5\x2e\x83\xd5\xc0\x39\x82\xb6\x96\xd1\xc1\x3e\x9c\x4e\x19\xe1\x76\x21\x06\x99\x54\xb6\xa8\x19\xbd" +
	"\x61\xe3\x90\xe8\xc9\x88\x59\x94\x63\xc0\x7f\x5d\x66\x9e\xe5\x29\xd5\x53\x33\xe2\xf0\xf1\x06\xe2\x70\x7c\x37\x6d" +
	"\x0b\x68\x14\x74\xdd\x57\x00\x00\x00\xff\xff\x6b\xc5\x4b\x17\x60\x03\x00\x00")

func bindataTemplatesheadergohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesheadergohtml,
		"templates/header.go.html",
	)
}



func bindataTemplatesheadergohtml() (*asset, error) {
	bytes, err := bindataTemplatesheadergohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/header.go.html",
		size: 864,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1562601553, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplateshomegohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x4d\x6a\x04\x21\x10\x85\xf7\x7d\x8a\xc2\x03\xe8\xd0\xb3\x75\x3c" +
	"\x41\x08\x81\x9c\xc0\x89\xe5\x28\x69\x35\x74\x9b\x40\x28\xea\xee\xa1\x7b\x84\xfe\xdb\x65\xa7\x7c\xbe\xcf\xe2\x15" +
	"\x91\x43\x1f\x33\x82\x08\x25\xa1\x60\xee\x74\xa8\x69\x30\x1d\x00\x00\x11\x54\x4c\x5f\x83\xad\x33\x47\xeb\x70\x14" +
	"\x20\x99\x17\xa8\xef\xc5\xfd\x42\x74\x37\x31\x1f\xc4\x33\xb1\x80\xd0\x9b\xfe\x72\x99\x3e\xa4\xc3\x1f\xad\x42\xbf" +
	"\x22\xa2\xd1\xe6\x07\x82\x7c\xb3\x0f\x9c\x9a\x68\x85\xd1\x83\x7c\xff\xbe\x37\x08\x3a\x5c\x0d\x91\x7c\xb5\x09\x99" +
	"\xb5\x0a\x57\x03\x44\x98\xdd\x29\xd7\xa4\x9b\xe8\xee\xc1\x32\x94\x85\x30\xa2\xbf\x09\x22\xf9\x12\xf3\x27\xb3\xd8" +
	"\xba\xad\x39\x28\x71\x98\xf0\xf0\xcf\xbf\x34\xbb\x69\xcf\xf7\x4d\xbf\xbe\x94\xba\xeb\x57\xcd\xbd\x9a\x4e\xab\xe7" +
	"\x42\x5a\xf8\x2f\x00\x00\xff\xff\x70\xea\x6b\xb1\xb1\x01\x00\x00")

func bindataTemplateshomegohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplateshomegohtml,
		"templates/home.go.html",
	)
}



func bindataTemplateshomegohtml() (*asset, error) {
	bytes, err := bindataTemplateshomegohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/home.go.html",
		size: 433,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1562601570, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesresumegohtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x6a\xc4\x30\x0c\x86\xf7\x83\x7b\x07\xe1\xa9\x1d\x1a\x1d\x19" +
	"\x8b\xeb\xa1\x4b\xd7\xd2\x3e\x81\xed\x28\x27\x73\x97\x38\x38\x4a\x43\x31\x79\xf7\x92\x90\x82\xef\xa0\x1d\xa5\xef" +
	"\x47\xe2\xff\x72\x6e\xa8\x0d\x3d\x81\x4a\x34\x4e\x1d\xa9\x65\x39\x1e\x34\x4b\x77\x35\xc7\x03\x00\x40\xce\x20\xd4" +
	"\x0d\x57\x2b\x04\x8a\xc9\x36\x94\x14\x54\xb0\xc6\x56\xac\x5d\x6c\xbe\xf7\xe8\x36\x73\x6d\x3e\xb6\x4b\x1a\xb9\x2e" +
	"\xc1\x50\x0c\x00\x6f\x41\x78\x72\xf0\x04\xda\x02\x27\x6a\x5f\x14\x8b\x0c\xe3\x33\xe2\x3c\xcf\xd5\x79\xa3\x95\x8f" +
	"\x1d\xd6\xa7\xd3\xe8\x95\xb9\xdf\x68\xb4\x46\xbb\x74\x73\xf3\x35\x88\x9b\xfc\x85\x04\x1e\x42\x6f\xbd\x84\x2f\x7a" +
	"\xfc\xeb\x83\xfb\xcd\x56\x31\x9d\xf1\x53\x68\x60\xea\xdf\xad\xa4\xe0\x2f\xca\xfc\x47\xd7\xcf\x45\x2d\x2c\x7b\xdd" +
	"\xc8\x6a\x63\x94\x3b\x59\xb8\xdb\xd2\xb8\x1b\xce\x99\xfa\x66\x59\x7e\x02\x00\x00\xff\xff\x85\xaf\x9d\xf5\x86\x01" +
	"\x00\x00")

func bindataTemplatesresumegohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesresumegohtml,
		"templates/resume.go.html",
	)
}



func bindataTemplatesresumegohtml() (*asset, error) {
	bytes, err := bindataTemplatesresumegohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/resume.go.html",
		size: 390,
		md5checksum: "",
		mode: os.FileMode(438),
		modTime: time.Unix(1562601391, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/construction.go.html": bindataTemplatesconstructiongohtml,
	"templates/footer.go.html":       bindataTemplatesfootergohtml,
	"templates/header.go.html":       bindataTemplatesheadergohtml,
	"templates/home.go.html":         bindataTemplateshomegohtml,
	"templates/resume.go.html":       bindataTemplatesresumegohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"construction.go.html": {Func: bindataTemplatesconstructiongohtml, Children: map[string]*bintree{}},
		"footer.go.html": {Func: bindataTemplatesfootergohtml, Children: map[string]*bintree{}},
		"header.go.html": {Func: bindataTemplatesheadergohtml, Children: map[string]*bintree{}},
		"home.go.html": {Func: bindataTemplateshomegohtml, Children: map[string]*bintree{}},
		"resume.go.html": {Func: bindataTemplatesresumegohtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
